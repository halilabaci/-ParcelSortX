import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;

public class ReportGenerator {

    private String filename; // Raporun yazılacağı dosya adını burada tutuyorum

    // Constructor – sınıf çağrıldığında dosya adını alıyor
    public ReportGenerator(String filename) {
        this.filename = filename;
    }

    // Asıl işi yapan fonksiyon burası – bütün istatistikleri alıp dosyaya rapor yazıyor
    public void generateReport(
            int totalTicks,                    // Simülasyonda geçen toplam süre (tick sayısı)
            int totalParcelsGenerated,         // Oluşturulan toplam parcel sayısı
            int totalDispatched,               // Başarıyla gönderilen parcel sayısı
            int totalReturned,                 // İade edilen parcel sayısı
            int parcelsInQueue,                // Kuyrukta kalan parcel sayısı
            int parcelsInBST,                  // BST içindeki parcel sayısı
            int parcelsInStack,                // Stack içindeki parcel sayısı
            Map<String, Integer> parcelsPerCity, // Şehre göre parcel sayıları
            String mostTargetedCity,           // En çok hedeflenen şehir
            double avgProcessingTime,          // Ortalama işlem süresi
            String maxDelayParcelID,           // En çok geciken parcel in ID si
            int maxDelay,                      // En çok geciken parcel in gecikme süresi
            int returnMoreThanOnce,            // Birden fazla kez iade edilen parcel sayısı
            int maxQueueSize,                  // Gözlenen maksimum queue boyutu
            int maxStackSize,                  // Gözlenen maksimum stack boyutu
            int bstHeight,                     // BST’in yüksekliği
            double hashLoadFactor              // Hash table'ın yük faktörü
    ) {
        // Try-with-resources sayesinde BufferedWriter'ı açıp işim bitince otomatik kapatıyorum
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
            writer.write("*** ParcelSortX Final Report ***\n\n");

            // 1. Simülasyon Genel Bilgileri 
            writer.write("1. Simulation Overview\n");
            writer.write("- Total Ticks Executed: " + totalTicks + "\n");
            writer.write("- Total Parcels Generated: " + totalParcelsGenerated + "\n\n");

            // 2. Kargo İstatistikleri
            writer.write("2. Parcel Statistics\n");
            writer.write("- Dispatched Parcels: " + totalDispatched + "\n");
            writer.write("- Returned Parcels: " + totalReturned + "\n");
            writer.write("- Parcels in Queue: " + parcelsInQueue + "\n");
            writer.write("- Parcels in BST: " + parcelsInBST + "\n");
            writer.write("- Parcels in Return Stack: " + parcelsInStack + "\n\n");

            // 3. Şehirlere Göre Durum 
            writer.write("3. Destination Metrics\n");
            for (String city : parcelsPerCity.keySet()) {
                writer.write("- " + city + ": " + parcelsPerCity.get(city) + " parcels\n");
            }
            writer.write("- Most Targeted Destination: " + mostTargetedCity + "\n\n");

            // 4. Zaman ve Gecikme Verileri 
            writer.write("4. Timing and Delay Metrics\n");
            writer.write("- Avg Processing Time (ticks): " + String.format("%.2f", avgProcessingTime) + "\n");
            writer.write("- Parcel with Longest Delay: " + maxDelayParcelID + " (" + maxDelay + " ticks)\n");
            writer.write("- Parcels Returned > 1: " + returnMoreThanOnce + "\n\n");

            // 5. Veri Yapılarına Dair İstatistikler 
            writer.write("5. Data Structure Statistics\n");
            writer.write("- Max Queue Size Observed: " + maxQueueSize + "\n");
            writer.write("- Max Stack Size Observed: " + maxStackSize + "\n");
            writer.write("- Final BST Height: " + bstHeight + "\n");
            writer.write("- Hash Table Load Factor: " + String.format("%.2f", hashLoadFactor) + "\n");

            writer.write("\nReport generated by ReportGenerator.java\n");

            System.out.println(" Report written to " + filename); // Raporun başarıyla yazıldığını belirtiyorum
        } catch (IOException e) {
            // Her ihtimale karşı olası yazma hatasını buradan yakalıyorum
            System.err.println(" Error writing report: " + e.getMessage());
        }
    }
}
