import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;

public class ReportGenerator {

    private String filename;

    public ReportGenerator(String filename) {
        this.filename = filename;
    }

    public void generateReport(
            int totalTicks,
            int totalParcelsGenerated,
            int totalDispatched,
            int totalReturned,
            int parcelsInQueue,
            int parcelsInBST,
            int parcelsInStack,
            Map<String, Integer> parcelsPerCity,
            String mostTargetedCity,
            double avgProcessingTime,
            String maxDelayParcelID,
            int maxDelay,
            int returnMoreThanOnce,
            int maxQueueSize,
            int maxStackSize,
            int bstHeight,
            double hashLoadFactor
    ) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
            writer.write("=== ParcelSortX Final Report ===\n\n");

            // 1. Simulation Overview
            writer.write("1. Simulation Overview\n");
            writer.write("- Total Ticks Executed: " + totalTicks + "\n");
            writer.write("- Total Parcels Generated: " + totalParcelsGenerated + "\n\n");

            // 2. Parcel Statistics
            writer.write("2. Parcel Statistics\n");
            writer.write("- Dispatched Parcels: " + totalDispatched + "\n");
            writer.write("- Returned Parcels: " + totalReturned + "\n");
            writer.write("- Parcels in Queue: " + parcelsInQueue + "\n");
            writer.write("- Parcels in BST: " + parcelsInBST + "\n");
            writer.write("- Parcels in Return Stack: " + parcelsInStack + "\n\n");

            // 3. Destination Metrics
            writer.write("3. Destination Metrics\n");
            for (String city : parcelsPerCity.keySet()) {
                writer.write("- " + city + ": " + parcelsPerCity.get(city) + " parcels\n");
            }
            writer.write("- Most Targeted Destination: " + mostTargetedCity + "\n\n");

            // 4. Timing and Delay Metrics
            writer.write("4. Timing and Delay Metrics\n");
            writer.write("- Avg Processing Time (ticks): " + String.format("%.2f", avgProcessingTime) + "\n");
            writer.write("- Parcel with Longest Delay: " + maxDelayParcelID + " (" + maxDelay + " ticks)\n");
            writer.write("- Parcels Returned > 1: " + returnMoreThanOnce + "\n\n");

            // 5. Data Structure Statistics
            writer.write("5. Data Structure Statistics\n");
            writer.write("- Max Queue Size Observed: " + maxQueueSize + "\n");
            writer.write("- Max Stack Size Observed: " + maxStackSize + "\n");
            writer.write("- Final BST Height: " + bstHeight + "\n");
            writer.write("- Hash Table Load Factor: " + String.format("%.2f", hashLoadFactor) + "\n");

            writer.write("\nReport generated by ReportGenerator.java\n");

            System.out.println("✅ Report written to " + filename);
        } catch (IOException e) {
            System.err.println("❌ Error writing report: " + e.getMessage());
        }
    }
}
